//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppConsole.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService1", CallbackContract=typeof(AppConsole.ServiceReference.IService1Callback))]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCitiesName", ReplyAction="http://tempuri.org/IService1/GetCitiesNameResponse")]
        string[] GetCitiesName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCitiesName", ReplyAction="http://tempuri.org/IService1/GetCitiesNameResponse")]
        System.Threading.Tasks.Task<string[]> GetCitiesNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStationsFromCity", ReplyAction="http://tempuri.org/IService1/GetStationsFromCityResponse")]
        string[] GetStationsFromCity(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStationsFromCity", ReplyAction="http://tempuri.org/IService1/GetStationsFromCityResponse")]
        System.Threading.Tasks.Task<string[]> GetStationsFromCityAsync(string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStationOfCity", ReplyAction="http://tempuri.org/IService1/GetStationOfCityResponse")]
        string GetStationOfCity(int station, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetStationOfCity", ReplyAction="http://tempuri.org/IService1/GetStationOfCityResponse")]
        System.Threading.Tasks.Task<string> GetStationOfCityAsync(int station, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EmptyCache", ReplyAction="http://tempuri.org/IService1/EmptyCacheResponse")]
        void EmptyCache();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EmptyCache", ReplyAction="http://tempuri.org/IService1/EmptyCacheResponse")]
        System.Threading.Tasks.Task EmptyCacheAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetCacheDelay", ReplyAction="http://tempuri.org/IService1/SetCacheDelayResponse")]
        void SetCacheDelay(long delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetCacheDelay", ReplyAction="http://tempuri.org/IService1/SetCacheDelayResponse")]
        System.Threading.Tasks.Task SetCacheDelayAsync(long delay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SuscribeStationEvent", ReplyAction="http://tempuri.org/IService1/SuscribeStationEventResponse")]
        void SuscribeStationEvent(int station, string city);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SuscribeStationEvent", ReplyAction="http://tempuri.org/IService1/SuscribeStationEventResponse")]
        System.Threading.Tasks.Task SuscribeStationEventAsync(int station, string city);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Callback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/GetStation")]
        void GetStation(string station, int bikes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : AppConsole.ServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.DuplexClientBase<AppConsole.ServiceReference.IService1>, AppConsole.ServiceReference.IService1 {
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string[] GetCitiesName() {
            return base.Channel.GetCitiesName();
        }
        
        public System.Threading.Tasks.Task<string[]> GetCitiesNameAsync() {
            return base.Channel.GetCitiesNameAsync();
        }
        
        public string[] GetStationsFromCity(string city) {
            return base.Channel.GetStationsFromCity(city);
        }
        
        public System.Threading.Tasks.Task<string[]> GetStationsFromCityAsync(string city) {
            return base.Channel.GetStationsFromCityAsync(city);
        }
        
        public string GetStationOfCity(int station, string city) {
            return base.Channel.GetStationOfCity(station, city);
        }
        
        public System.Threading.Tasks.Task<string> GetStationOfCityAsync(int station, string city) {
            return base.Channel.GetStationOfCityAsync(station, city);
        }
        
        public void EmptyCache() {
            base.Channel.EmptyCache();
        }
        
        public System.Threading.Tasks.Task EmptyCacheAsync() {
            return base.Channel.EmptyCacheAsync();
        }
        
        public void SetCacheDelay(long delay) {
            base.Channel.SetCacheDelay(delay);
        }
        
        public System.Threading.Tasks.Task SetCacheDelayAsync(long delay) {
            return base.Channel.SetCacheDelayAsync(delay);
        }
        
        public void SuscribeStationEvent(int station, string city) {
            base.Channel.SuscribeStationEvent(station, city);
        }
        
        public System.Threading.Tasks.Task SuscribeStationEventAsync(int station, string city) {
            return base.Channel.SuscribeStationEventAsync(station, city);
        }
    }
}
